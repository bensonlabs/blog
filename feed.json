{
    "version": "https://jsonfeed.org/version/1",
    "title": "bensonlabs.org",
    "description": "",
    "home_page_url": "https://bensonlabs.github.io/blog",
    "feed_url": "https://bensonlabs.github.io/blog/feed.json",
    "user_comment": "",
    "icon": "https://bensonlabs.github.io/blog/media/website/bensonlabs-bolt4.png",
    "author": {
        "name": "Justin Benson"
    },
    "items": [
        {
            "id": "https://bensonlabs.github.io/blog/powershell-log-ip-status.html",
            "url": "https://bensonlabs.github.io/blog/powershell-log-ip-status.html",
            "title": "Powershell - Log IP status",
            "summary": "#Gets a list of computer names or IPs from a .txt file. $names = Get-content \"&lt;location of .txt file full of IP addresses&gt;\" #Sets the name and the location of your output .CSV file. $IPstatus = \"&lt;location of .csv file&gt;\" $date = Get-Date #Pings each&hellip;",
            "content_html": "<p>#Gets a list of computer names or IPs from a .txt file.<br>$names = Get-content \"&lt;location of .txt file full of IP addresses&gt;\"<br><br>#Sets the name and the location of your output .CSV file.<br>$IPstatus = \"&lt;location of .csv file&gt;\"<br><br>$date = Get-Date<br><br>#Pings each device in your list. <br>foreach ($name in $names){<br> if (Test-Connection -ComputerName $name -Count 1 -ErrorAction SilentlyContinue){</p>\n<p># logs all UP IPs with time stamp<br> Add-Content -Value \"$name,up,$date\" -Path $IPstatus<br> }</p>\n<p># logs all DOWN IPs with timestamp<br> else{<br> Add-Content -Value \"$name,down,$date\" -Path $IPstatus<br> }<br>}</p>",
            "author": {
                "name": "Justin Benson"
            },
            "tags": [
            ],
            "date_published": "2020-05-07T07:32:27-07:00",
            "date_modified": "2020-05-07T07:32:27-07:00"
        },
        {
            "id": "https://bensonlabs.github.io/blog/macos-remove-searchmine-malware-script.html",
            "url": "https://bensonlabs.github.io/blog/macos-remove-searchmine-malware-script.html",
            "title": "macOS - Remove SearchMine malware script",
            "summary": "Save these steps somewhere safe and close Chrome.Click the \"Preferences\" icon in your Mac's menu bar and select \"Profiles\".Select all \"AdminPrefs\" profile(s) and delete it/them by clicking the minus (-) icon at the bottom.Once you've removed the unwanted \"adminprefs\" profile(s), you should be able to&hellip;",
            "content_html": "<ol>\n<li>Save these steps somewhere safe and close Chrome.</li>\n<li>Click the \"Preferences\" icon in your Mac's menu bar and select \"Profiles\".</li>\n<li>Select all \"AdminPrefs\" profile(s) and delete it/them by clicking the minus (-) icon at the bottom.</li>\n<li>Once you've removed the unwanted \"adminprefs\" profile(s), you should be able to follow these steps:</li>\n<li>Open the Terminal app (Go &gt; Utilities &gt; Terminal or press Command+Space and search Terminal)</li>\n<li>Enter the commands below and hit the Enter key after each one:</li>\n</ol>\n<p>(or put it into a .sh script, then run as sudo):</p>\n<pre>#!/bin/bash<br><br>defaults write com.google.Chrome HomepageIsNewTabPage -bool false<br>defaults write com.google.Chrome NewTabPageLocation -string https://www.google.com/\"<br>defaults write com.google.Chrome HomepageLocation -string “https://www.google.com/”<br>defaults delete com.google.Chrome DefaultSearchProviderSearchURL<br>defaults delete com.google.Chrome DefaultSearchProviderNewTabURL<br>defaults delete com.google.Chrome DefaultSearchProviderName</pre>\n<p>Now restart Chrome and the issue should be resolved. If not, you may need to restart your Mac.</p>\n<p>Reference: https://support.google.com/chrome/thread/9350623?hl=en</p>",
            "author": {
                "name": "Justin Benson"
            },
            "tags": [
            ],
            "date_published": "2020-05-06T14:39:47-07:00",
            "date_modified": "2020-05-06T14:45:08-07:00"
        },
        {
            "id": "https://bensonlabs.github.io/blog/directaccess-stuck-trying-to-connect.html",
            "url": "https://bensonlabs.github.io/blog/directaccess-stuck-trying-to-connect.html",
            "title": "DirectAccess stuck connecting",
            "summary": "Remote into computer with DirectAccess issues.Copy the install folder of your VPN over remote connection.Install and connect through VPN and run this 2 times in CMD with admin privileges: GPUPDATE /FORCESign out/sign inUninstall the VPN (DirectAccess might not let you connect to folders until VPN is&hellip;",
            "content_html": "<ol>\n<li>Remote into computer with DirectAccess issues.</li>\n<li>Copy the install folder of your VPN over remote connection.</li>\n<li>Install and connect through VPN and run this 2 times in CMD with admin privileges: GPUPDATE /FORCE</li>\n<li>Sign out/sign in</li>\n<li>Uninstall the VPN (DirectAccess might not let you connect to folders until VPN is disconnected.  Better to just uninstall it.</li>\n</ol>",
            "author": {
                "name": "Justin Benson"
            },
            "tags": [
            ],
            "date_published": "2020-05-05T11:06:23-07:00",
            "date_modified": "2020-05-05T11:22:08-07:00"
        }
    ]
}
